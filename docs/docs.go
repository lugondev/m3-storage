// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/media": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of media files owned by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "List media files for the authenticated user with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of media files",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            }
        },
        "/media/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a file to the specified provider with optional media type hint",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "Upload a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage provider (e.g., s3, azure, firebase, discord). If not specified, default provider will be used.",
                        "name": "provider",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Media type hint (e.g., image/jpeg, video/mp4). If not specified, it will be determined from the file.",
                        "name": "media_type",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            }
        },
        "/media/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific media file by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "Get a specific media file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media file details",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_modules_media_domain.Media"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific media file by ID",
                "tags": [
                    "Media"
                ],
                "summary": "Delete a specific media file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media file deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            }
        },
        "/storage/health": {
            "get": {
                "description": "Check if the storage provider is healthy and accessible",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "storage"
                ],
                "summary": "Check storage provider health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage provider type",
                        "name": "provider_type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_modules_storage_dto.HealthCheckResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            }
        },
        "/storage/health/all": {
            "get": {
                "description": "Check if all configured storage providers are healthy and accessible",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "storage"
                ],
                "summary": "Check all storage providers health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_modules_storage_dto.HealthCheckAllResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            }
        },
        "/storage/providers": {
            "get": {
                "description": "Get a list of all supported storage provider types with their information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "storage"
                ],
                "summary": "List all available storage providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_modules_storage_dto.ListProvidersResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_shared_errors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_lugondev_m3-storage_internal_modules_media_domain.Media": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                },
                "file_path": {
                    "description": "Path in the adapters provider",
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "media_type": {
                    "description": "e.g., image, video, document",
                    "type": "string"
                },
                "provider": {
                    "description": "e.g., local, s3, azure, firebase",
                    "type": "string"
                },
                "public_url": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uploaded_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_lugondev_m3-storage_internal_modules_storage_dto.HealthCheckAllResponse": {
            "type": "object",
            "properties": {
                "providers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_modules_storage_dto.HealthCheckResponse"
                    }
                }
            }
        },
        "github_com_lugondev_m3-storage_internal_modules_storage_dto.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": ""
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "github_com_lugondev_m3-storage_internal_modules_storage_dto.ListProvidersResponse": {
            "type": "object",
            "properties": {
                "providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_lugondev_m3-storage_internal_modules_storage_dto.ProviderInfo"
                    }
                }
            }
        },
        "github_com_lugondev_m3-storage_internal_modules_storage_dto.ProviderInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Amazon Simple Storage Service"
                },
                "name": {
                    "type": "string",
                    "example": "Amazon S3"
                },
                "type": {
                    "type": "string",
                    "example": "s3"
                }
            }
        },
        "github_com_lugondev_m3-storage_internal_shared_errors.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8083",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "AuthSys API",
	Description:      "This is the core API for AuthSys platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
