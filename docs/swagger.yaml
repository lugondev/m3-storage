basePath: /api/v1
definitions:
  github_com_lugondev_m3-storage_internal_modules_media_domain.Media:
    properties:
      created_at:
        type: string
      file_name:
        type: string
      file_path:
        description: Path in the adapters provider
        type: string
      file_size:
        type: integer
      id:
        type: string
      media_type:
        description: e.g., image, video, document
        type: string
      provider:
        description: e.g., local, s3, azure, firebase
        type: string
      public_url:
        type: string
      updated_at:
        type: string
      uploaded_at:
        type: string
      user_id:
        type: string
    type: object
  internal_modules_user_handler.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  internal_modules_user_handler.UserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the core API for AuthSys platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: AuthSys API
  version: "1.0"
paths:
  /media:
    get:
      description: Get a paginated list of media files owned by the authenticated
        user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of media files
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - missing or invalid JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List media files for the authenticated user with pagination
      tags:
      - Media
  /media/{id}:
    delete:
      description: Delete a specific media file by ID
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Media file deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - invalid media ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Media file not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a specific media file
      tags:
      - Media
    get:
      description: Get details of a specific media file by ID
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media file details
          schema:
            $ref: '#/definitions/github_com_lugondev_m3-storage_internal_modules_media_domain.Media'
        "400":
          description: Bad request - invalid media ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Media file not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a specific media file
      tags:
      - Media
  /media/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to the specified provider with optional media type
        hint
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Storage provider (e.g., s3, azure, firebase, discord). If not
          specified, default provider will be used.
        in: formData
        name: provider
        type: string
      - description: Media type hint (e.g., image/jpeg, video/mp4). If not specified,
          it will be determined from the file.
        in: formData
        name: media_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded successfully with media details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - missing file or invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload a file
      tags:
      - Media
  /storage/health:
    get:
      consumes:
      - application/json
      description: Check if the storage provider is healthy and accessible
      parameters:
      - description: Storage provider type
        enum:
        - s3
        - cloudflare_r2
        - local
        - firebase
        - azure
        - discord
        - scaleway
        - backblaze
        in: query
        name: provider_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check storage provider health
      tags:
      - storage
  /storage/health/all:
    get:
      consumes:
      - application/json
      description: Check if all configured storage providers are healthy and accessible
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              additionalProperties:
                type: string
              type: object
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check all storage providers health
      tags:
      - storage
  /users/{id}:
    get:
      description: Retrieve user details by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/internal_modules_user_handler.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/internal_modules_user_handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_modules_user_handler.ErrorResponse'
      summary: Get a user by ID
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
